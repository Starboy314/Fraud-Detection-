import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from imblearn.over_sampling import SMOTE

# Load the dataset
df = pd.read_csv('creditcard.csv')

# Display the first few rows of the dataset
print(df.head())

# Display the column names
print(df.columns)

# Check for any missing values
print(df.isnull().sum())

# Statistical summary of the dataset
print(df.describe())

# Define the target and features
target_column = 'class'  # Fraudulent transactions are labeled as '1' in the 'Class' column

# Split the data into features (X) and target (y)
X = df.drop(target_column, axis=1)
y = df[target_column]

# Use a subset of the data to reduce time for testing purposes
# Uncomment the following line to use a subset
# X, y = X.sample(10000, random_state=42), y.sample(10000, random_state=42)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the feature columns
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Handle class imbalance using SMOTE
smote = SMOTE(random_state=42)
X_train_res, y_train_res = smote.fit_resample(X_train, y_train)

# Train a Random Forest Classifier with fewer estimators for quicker runs
model = RandomForestClassifier(n_estimators=50, random_state=42, n_jobs=-1)
model.fit(X_train_res, y_train_res)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nAccuracy Score:", accuracy_score(y_test, y_pred))
